/* automatically generated by rust-bindgen 0.55.1 */

pub const NFS_PORT: u32 = 2049;
pub const NFS_PROG: u32 = 100003;
pub const NFS_VER2: u32 = 2;
pub const NFS_VER3: u32 = 3;
pub const NFS_VER4: u32 = 4;
pub const NFS_V2MAXDATA: u32 = 8192;
pub const NFS_MAXDGRAMDATA: u32 = 16384;
pub const NFS_MAXDATA: u32 = 32768;
pub const NFS_MAXPATHLEN: u32 = 1024;
pub const NFS_MAXNAMLEN: u32 = 255;
pub const NFS_MAXPKTHDR: u32 = 404;
pub const NFS_MAXPACKET: u32 = 33172;
pub const NFS_MINPACKET: u32 = 20;
pub const NFS_FABLKSIZE: u32 = 512;
pub const NFS_OK: u32 = 0;
pub const NFSERR_PERM: u32 = 1;
pub const NFSERR_NOENT: u32 = 2;
pub const NFSERR_IO: u32 = 5;
pub const NFSERR_NXIO: u32 = 6;
pub const NFSERR_ACCES: u32 = 13;
pub const NFSERR_EXIST: u32 = 17;
pub const NFSERR_XDEV: u32 = 18;
pub const NFSERR_NODEV: u32 = 19;
pub const NFSERR_NOTDIR: u32 = 20;
pub const NFSERR_ISDIR: u32 = 21;
pub const NFSERR_INVAL: u32 = 22;
pub const NFSERR_FBIG: u32 = 27;
pub const NFSERR_NOSPC: u32 = 28;
pub const NFSERR_ROFS: u32 = 30;
pub const NFSERR_MLINK: u32 = 31;
pub const NFSERR_NAMETOL: u32 = 63;
pub const NFSERR_NOTEMPTY: u32 = 66;
pub const NFSERR_DQUOT: u32 = 69;
pub const NFSERR_STALE: u32 = 70;
pub const NFSERR_REMOTE: u32 = 71;
pub const NFSERR_WFLUSH: u32 = 99;
pub const NFSERR_BADHANDLE: u32 = 10001;
pub const NFSERR_NOT_SYNC: u32 = 10002;
pub const NFSERR_BAD_COOKIE: u32 = 10003;
pub const NFSERR_NOTSUPP: u32 = 10004;
pub const NFSERR_TOOSMALL: u32 = 10005;
pub const NFSERR_SERVERFAULT: u32 = 10006;
pub const NFSERR_BADTYPE: u32 = 10007;
pub const NFSERR_JUKEBOX: u32 = 10008;
pub const NFSERR_TRYLATER: u32 = 10008;
pub const NFSERR_SAME: u32 = 10009;
pub const NFSERR_DENIED: u32 = 10010;
pub const NFSERR_EXPIRED: u32 = 10011;
pub const NFSERR_LOCKED: u32 = 10012;
pub const NFSERR_GRACE: u32 = 10013;
pub const NFSERR_FHEXPIRED: u32 = 10014;
pub const NFSERR_SHARDE_DENIED: u32 = 10015;
pub const NFSERR_WRONGSEC: u32 = 10016;
pub const NFSERR_CLID_INUSE: u32 = 10017;
pub const NFSERR_RESOURCE: u32 = 10018;
pub const NFSERR_MOVED: u32 = 10019;
pub const NFSERR_NOFILEHANDLE: u32 = 10020;
pub const NFSERR_MINOR_VERS_MISMATCH: u32 = 10021;
pub const NFSERR_STALE_CLIENTID: u32 = 10022;
pub const NFSERR_STALE_STATEID: u32 = 10023;
pub const NFSERR_OLD_STATEID: u32 = 10024;
pub const NFSERR_BAD_STATEID: u32 = 10025;
pub const NFSERR_BAD_SEQID: u32 = 10026;
pub const NFSERR_NOT_SAME: u32 = 10027;
pub const NFSERR_LOCK_RANGE: u32 = 10028;
pub const NFSERR_SYMLINK: u32 = 10029;
pub const NFSERR_READDIR_NOSPC: u32 = 10030;
pub const NFSERR_LEASE_MOVED: u32 = 10031;
pub const NFSERR_ATTRNOTSUPP: u32 = 10032;
pub const NFSERR_NO_GRACE: u32 = 10033;
pub const NFSERR_RECLAIM_BAD: u32 = 10034;
pub const NFSERR_RECLAIM_CONFLICT: u32 = 10035;
pub const NFSERR_BADXDR: u32 = 10036;
pub const NFSERR_LOCKS_HELD: u32 = 10037;
pub const NFSERR_OPENMODE: u32 = 10038;
pub const NFSERR_BADOWNER: u32 = 10039;
pub const NFSERR_BADCHAR: u32 = 10040;
pub const NFSERR_BADNAME: u32 = 10041;
pub const NFSERR_BAD_RANGE: u32 = 10042;
pub const NFSERR_LOCK_NOTSUPP: u32 = 10043;
pub const NFSERR_OP_ILLEGAL: u32 = 10044;
pub const NFSERR_DEADLOCK: u32 = 10045;
pub const NFSERR_FILE_OPEN: u32 = 10046;
pub const NFSERR_STALEWRITEVERF: u32 = 30001;
pub const NFSERR_RETVOID: u32 = 536870912;
pub const NFSERR_AUTHERR: u32 = 1073741824;
pub const NFSERR_RETERR: u32 = 2147483648;
pub const NFSX_UNSIGNED: u32 = 4;
pub const NFSX_V2FH: u32 = 32;
pub const NFSX_V2FATTR: u32 = 68;
pub const NFSX_V2SATTR: u32 = 32;
pub const NFSX_V2COOKIE: u32 = 4;
pub const NFSX_V2STATFS: u32 = 20;
pub const NFSX_V3FHMAX: u32 = 64;
pub const NFSX_V3FATTR: u32 = 84;
pub const NFSX_V3SATTR: u32 = 60;
pub const NFSX_V3POSTOPATTR: u32 = 88;
pub const NFSX_V3WCCDATA: u32 = 120;
pub const NFSX_V3COOKIEVERF: u32 = 8;
pub const NFSX_V3WRITEVERF: u32 = 8;
pub const NFSX_V3CREATEVERF: u32 = 8;
pub const NFSX_V3STATFS: u32 = 52;
pub const NFSX_V3FSINFO: u32 = 48;
pub const NFSX_V3PATHCONF: u32 = 24;
pub const NFSX_V4VERF: u32 = 8;
pub const NFSX_V4FH: u32 = 128;
pub const NFSX_V4STATEID: u32 = 16;
pub const NFSPROC_NULL: u32 = 0;
pub const NFSPROC_GETATTR: u32 = 1;
pub const NFSPROC_SETATTR: u32 = 2;
pub const NFSPROC_LOOKUP: u32 = 3;
pub const NFSPROC_ACCESS: u32 = 4;
pub const NFSPROC_READLINK: u32 = 5;
pub const NFSPROC_READ: u32 = 6;
pub const NFSPROC_WRITE: u32 = 7;
pub const NFSPROC_CREATE: u32 = 8;
pub const NFSPROC_MKDIR: u32 = 9;
pub const NFSPROC_SYMLINK: u32 = 10;
pub const NFSPROC_MKNOD: u32 = 11;
pub const NFSPROC_REMOVE: u32 = 12;
pub const NFSPROC_RMDIR: u32 = 13;
pub const NFSPROC_RENAME: u32 = 14;
pub const NFSPROC_LINK: u32 = 15;
pub const NFSPROC_READDIR: u32 = 16;
pub const NFSPROC_READDIRPLUS: u32 = 17;
pub const NFSPROC_FSSTAT: u32 = 18;
pub const NFSPROC_FSINFO: u32 = 19;
pub const NFSPROC_PATHCONF: u32 = 20;
pub const NFSPROC_COMMIT: u32 = 21;
pub const NFSPROC_NOOP: u32 = 22;
pub const NFS_NPROCS: u32 = 23;
pub const NFSV2PROC_NULL: u32 = 0;
pub const NFSV2PROC_GETATTR: u32 = 1;
pub const NFSV2PROC_SETATTR: u32 = 2;
pub const NFSV2PROC_NOOP: u32 = 3;
pub const NFSV2PROC_ROOT: u32 = 3;
pub const NFSV2PROC_LOOKUP: u32 = 4;
pub const NFSV2PROC_READLINK: u32 = 5;
pub const NFSV2PROC_READ: u32 = 6;
pub const NFSV2PROC_WRITECACHE: u32 = 3;
pub const NFSV2PROC_WRITE: u32 = 8;
pub const NFSV2PROC_CREATE: u32 = 9;
pub const NFSV2PROC_REMOVE: u32 = 10;
pub const NFSV2PROC_RENAME: u32 = 11;
pub const NFSV2PROC_LINK: u32 = 12;
pub const NFSV2PROC_SYMLINK: u32 = 13;
pub const NFSV2PROC_MKDIR: u32 = 14;
pub const NFSV2PROC_RMDIR: u32 = 15;
pub const NFSV2PROC_READDIR: u32 = 16;
pub const NFSV2PROC_STATFS: u32 = 17;
pub const NFSV4PROC_NULL: u32 = 0;
pub const NFSV4PROC_COMPOUND: u32 = 1;
pub const NFSV4OP_ACCESS: u32 = 3;
pub const NFSV4OP_CLOSE: u32 = 4;
pub const NFSV4OP_COMMIT: u32 = 5;
pub const NFSV4OP_CREATE: u32 = 6;
pub const NFSV4OP_DELEGPURGE: u32 = 7;
pub const NFSV4OP_DELEGRETURN: u32 = 8;
pub const NFSV4OP_GETATTR: u32 = 9;
pub const NFSV4OP_GETFH: u32 = 10;
pub const NFSV4OP_LINK: u32 = 11;
pub const NFSV4OP_LOCK: u32 = 12;
pub const NFSV4OP_LOCKT: u32 = 13;
pub const NFSV4OP_LOCKU: u32 = 14;
pub const NFSV4OP_LOOKUP: u32 = 15;
pub const NFSV4OP_LOOKUPP: u32 = 16;
pub const NFSV4OP_NVERIFY: u32 = 17;
pub const NFSV4OP_OPEN: u32 = 18;
pub const NFSV4OP_OPENATTR: u32 = 19;
pub const NFSV4OP_OPEN_CONFIRM: u32 = 20;
pub const NFSV4OP_OPEN_DOWNGRADE: u32 = 21;
pub const NFSV4OP_PUTFH: u32 = 22;
pub const NFSV4OP_PUTPUBFH: u32 = 23;
pub const NFSV4OP_PUTROOTFH: u32 = 24;
pub const NFSV4OP_READ: u32 = 25;
pub const NFSV4OP_READDIR: u32 = 26;
pub const NFSV4OP_READLINK: u32 = 27;
pub const NFSV4OP_REMOVE: u32 = 28;
pub const NFSV4OP_RENAME: u32 = 29;
pub const NFSV4OP_RENEW: u32 = 30;
pub const NFSV4OP_RESTOREFH: u32 = 31;
pub const NFSV4OP_SAVEFH: u32 = 32;
pub const NFSV4OP_SECINFO: u32 = 33;
pub const NFSV4OP_SETATTR: u32 = 34;
pub const NFSV4OP_SETCLIENTID: u32 = 35;
pub const NFSV4OP_SETCLIENTID_CONFIRM: u32 = 36;
pub const NFSV4OP_VERIFY: u32 = 37;
pub const NFSV4OP_WRITE: u32 = 38;
pub const NFSV3SATTRTIME_DONTCHANGE: u32 = 0;
pub const NFSV3SATTRTIME_TOSERVER: u32 = 1;
pub const NFSV3SATTRTIME_TOCLIENT: u32 = 2;
pub const NFSV3ACCESS_READ: u32 = 1;
pub const NFSV3ACCESS_LOOKUP: u32 = 2;
pub const NFSV3ACCESS_MODIFY: u32 = 4;
pub const NFSV3ACCESS_EXTEND: u32 = 8;
pub const NFSV3ACCESS_DELETE: u32 = 16;
pub const NFSV3ACCESS_EXECUTE: u32 = 32;
pub const NFSV3WRITE_UNSTABLE: u32 = 0;
pub const NFSV3WRITE_DATASYNC: u32 = 1;
pub const NFSV3WRITE_FILESYNC: u32 = 2;
pub const NFSV3CREATE_UNCHECKED: u32 = 0;
pub const NFSV3CREATE_GUARDED: u32 = 1;
pub const NFSV3CREATE_EXCLUSIVE: u32 = 2;
pub const NFSV3FSINFO_LINK: u32 = 1;
pub const NFSV3FSINFO_SYMLINK: u32 = 2;
pub const NFSV3FSINFO_HOMOGENEOUS: u32 = 8;
pub const NFSV3FSINFO_CANSETTIME: u32 = 16;
pub const NFSV4ACCESS_READ: u32 = 1;
pub const NFSV4ACCESS_LOOKUP: u32 = 2;
pub const NFSV4ACCESS_MODIFY: u32 = 4;
pub const NFSV4ACCESS_EXTEND: u32 = 8;
pub const NFSV4ACCESS_DELETE: u32 = 16;
pub const NFSV4ACCESS_EXECUTE: u32 = 32;
pub const NFSV4OPENRES_MLOCK: u32 = 1;
pub const NFSV4OPENRES_CONFIRM: u32 = 2;
pub const NFSV4OPENSHARE_ACCESS_READ: u32 = 1;
pub const NFSV4OPENSHARE_ACCESS_WRITE: u32 = 2;
pub const NFSV4OPENSHARE_ACCESS_BOTH: u32 = 3;
pub const NFSV4OPENSHARE_DENY_NONE: u32 = 0;
pub const NFSV4OPENSHARE_DENY_READ: u32 = 1;
pub const NFSV4OPENSHARE_DENY_WRITE: u32 = 2;
pub const NFSV4OPENSHARE_DENY_BOTH: u32 = 3;
pub const NFS_SMALLFH: u32 = 128;
pub const NFS_ARGSVERSION: u32 = 3;
pub const NFSMNT_SOFT: u32 = 1;
pub const NFSMNT_WSIZE: u32 = 2;
pub const NFSMNT_RSIZE: u32 = 4;
pub const NFSMNT_TIMEO: u32 = 8;
pub const NFSMNT_RETRANS: u32 = 16;
pub const NFSMNT_MAXGRPS: u32 = 32;
pub const NFSMNT_INT: u32 = 64;
pub const NFSMNT_NOCONN: u32 = 128;
pub const NFSMNT_ONEOPENOWN: u32 = 256;
pub const NFSMNT_NFSV3: u32 = 512;
pub const NFSMNT_KERB: u32 = 1024;
pub const NFSMNT_DUMBTIMR: u32 = 2048;
pub const NFSMNT_WCOMMITSIZE: u32 = 4096;
pub const NFSMNT_READAHEAD: u32 = 8192;
pub const NFSMNT_DEADTHRESH: u32 = 16384;
pub const NFSMNT_RESVPORT: u32 = 32768;
pub const NFSMNT_RDIRPLUS: u32 = 65536;
pub const NFSMNT_READDIRSIZE: u32 = 131072;
pub const NFSMNT_ACREGMIN: u32 = 262144;
pub const NFSMNT_ACREGMAX: u32 = 524288;
pub const NFSMNT_ACDIRMIN: u32 = 1048576;
pub const NFSMNT_ACDIRMAX: u32 = 2097152;
pub const NFSMNT_NOLOCKD: u32 = 4194304;
pub const NFSMNT_NFSV4: u32 = 8388608;
pub const NFSMNT_HASWRITEVERF: u32 = 16777216;
pub const NFSMNT_INTEGRITY: u32 = 33554432;
pub const NFSMNT_PRIVACY: u32 = 67108864;
pub const NFSMNT_ALLGSSNAME: u32 = 134217728;
pub const NFSMNT_STRICT3530: u32 = 268435456;
pub const NFSMNT_NOCTO: u32 = 536870912;
pub const NFSMNT_PNFS: u32 = 1073741824;
pub const NFSMNT_NONCONTIGWR: u32 = 2147483648;
pub const NFS_TICKINTVL: u32 = 10;
pub const NFS_MAXREXMIT: u32 = 100;
pub const NFS_RETRANS: u32 = 10;
pub const NFS_RETRANS_TCP: u32 = 2;
pub const NFS_MAXGRPS: u32 = 16;
pub const NFS_MINATTRTIMO: u32 = 3;
pub const NFS_MAXATTRTIMO: u32 = 60;
pub const NFS_MINDIRATTRTIMO: u32 = 3;
pub const NFS_MAXDIRATTRTIMO: u32 = 60;
pub const NFS_ACCESSCACHESIZE: u32 = 8;
pub const NFS_WSIZE: u32 = 8192;
pub const NFS_RSIZE: u32 = 8192;
pub const NFS_READDIRSIZE: u32 = 8192;
pub const NFS_DEFRAHEAD: u32 = 1;
pub const NFS_MAXRAHEAD: u32 = 4;
pub const NFS_MAXASYNCDAEMON: u32 = 64;
pub const NFS_DIRBLKSIZ: u32 = 4096;
pub const NFS_MAXDEADTHRESH: u32 = 9;
pub const NFSSTA_HASWRITEVERF: u32 = 262144;
pub const NFSSTA_GOTFSINFO: u32 = 1048576;
pub const NFSSTA_SNDLOCK: u32 = 16777216;
pub const NFSSTA_WANTSND: u32 = 33554432;
pub const NFSSTA_TIMEO: u32 = 268435456;
pub const NFSSTA_LOCKTIMEO: u32 = 536870912;
pub const NFS_NFSSTATS: u32 = 1;
pub const NFSSVC_OLDNFSD: u32 = 4;
pub const NFSSVC_ADDSOCK: u32 = 8;
pub const NFSSVC_NFSD: u32 = 16;
pub const NFSSVC_NOPUBLICFH: u32 = 32;
pub const NFSSVC_STABLERESTART: u32 = 64;
pub const NFSSVC_NFSDNFSD: u32 = 128;
pub const NFSSVC_NFSDADDSOCK: u32 = 256;
pub const NFSSVC_IDNAME: u32 = 512;
pub const NFSSVC_GSSDDELETEALL: u32 = 1024;
pub const NFSSVC_GSSDADDPORT: u32 = 2048;
pub const NFSSVC_NFSUSERDPORT: u32 = 4096;
pub const NFSSVC_NFSUSERDDELPORT: u32 = 8192;
pub const NFSSVC_V4ROOTEXPORT: u32 = 16384;
pub const NFSSVC_ADMINREVOKE: u32 = 32768;
pub const NFSSVC_DUMPCLIENTS: u32 = 65536;
pub const NFSSVC_DUMPLOCKS: u32 = 131072;
pub const NFSSVC_GSSDADDFIRST: u32 = 262144;
pub const NFSSVC_PUBLICFH: u32 = 524288;
pub const NFSSVC_NFSCBD: u32 = 1048576;
pub const NFSSVC_CBADDSOCK: u32 = 2097152;
pub const NFSSVC_GETSTATS: u32 = 4194304;
pub const NFSSVC_BACKUPSTABLE: u32 = 8388608;
pub const NFSSVC_ZEROCLTSTATS: u32 = 16777216;
pub const NFSSVC_ZEROSRVSTATS: u32 = 33554432;
pub const NFSSVC_SUSPENDNFSD: u32 = 67108864;
pub const NFSSVC_RESUMENFSD: u32 = 134217728;
pub const NFSSVC_DUMPMNTOPTS: u32 = 268435456;
pub const NFSSVC_NEWSTRUCT: u32 = 536870912;
pub const NFSSVC_FORCEDISM: u32 = 1073741824;
pub const NFS_MAXUIDHASH: u32 = 64;
pub const NFS_GATHERDELAY: u32 = 10;
pub const NFSRV_SNDLOCK: u32 = 16777216;
pub const NFSRV_WANTSND: u32 = 33554432;
pub const NFS_NFSRVSTATS: u32 = 1;
pub const NFS_NFSPRIVPORT: u32 = 2;
pub const NFSV4OP_OPENCONFIRM: u32 = 20;
pub const NFSV4OP_OPENDOWNGRADE: u32 = 21;
pub const NFSV4OP_SETCLIENTIDCFRM: u32 = 36;
pub const NFSV4OP_RELEASELCKOWN: u32 = 39;
pub const NFSV4OP_NOPS: u32 = 40;
pub const NFSV4OP_BACKCHANNELCTL: u32 = 40;
pub const NFSV4OP_BINDCONNTOSESS: u32 = 41;
pub const NFSV4OP_EXCHANGEID: u32 = 42;
pub const NFSV4OP_CREATESESSION: u32 = 43;
pub const NFSV4OP_DESTROYSESSION: u32 = 44;
pub const NFSV4OP_FREESTATEID: u32 = 45;
pub const NFSV4OP_GETDIRDELEG: u32 = 46;
pub const NFSV4OP_GETDEVINFO: u32 = 47;
pub const NFSV4OP_GETDEVLIST: u32 = 48;
pub const NFSV4OP_LAYOUTCOMMIT: u32 = 49;
pub const NFSV4OP_LAYOUTGET: u32 = 50;
pub const NFSV4OP_LAYOUTRETURN: u32 = 51;
pub const NFSV4OP_SECINFONONAME: u32 = 52;
pub const NFSV4OP_SEQUENCE: u32 = 53;
pub const NFSV4OP_SETSSV: u32 = 54;
pub const NFSV4OP_TESTSTATEID: u32 = 55;
pub const NFSV4OP_WANTDELEG: u32 = 56;
pub const NFSV4OP_DESTROYCLIENTID: u32 = 57;
pub const NFSV4OP_RECLAIMCOMPL: u32 = 58;
pub const NFSV41_NOPS: u32 = 59;
pub const NFSV42_NOPS: u32 = 72;
pub const NFSV4OP_OPILLEGAL: u32 = 10044;
pub const NFSV4OP_SYMLINK: u32 = 72;
pub const NFSV4OP_MKDIR: u32 = 73;
pub const NFSV4OP_RMDIR: u32 = 74;
pub const NFSV4OP_READDIRPLUS: u32 = 75;
pub const NFSV4OP_MKNOD: u32 = 76;
pub const NFSV4OP_FSSTAT: u32 = 77;
pub const NFSV4OP_FSINFO: u32 = 78;
pub const NFSV4OP_PATHCONF: u32 = 79;
pub const NFSV4OP_V3CREATE: u32 = 80;
pub const NFSV4OP_FAKENOPS: u32 = 9;
pub const NFSV4OP_CBGETATTR: u32 = 3;
pub const NFSV4OP_CBRECALL: u32 = 4;
pub const NFSV4OP_CBNOPS: u32 = 5;
pub const NFSV4OP_CBLAYOUTRECALL: u32 = 5;
pub const NFSV4OP_CBNOTIFY: u32 = 6;
pub const NFSV4OP_CBPUSHDELEG: u32 = 7;
pub const NFSV4OP_CBRECALLANY: u32 = 8;
pub const NFSV4OP_CBRECALLOBJAVAIL: u32 = 9;
pub const NFSV4OP_CBRECALLSLOT: u32 = 10;
pub const NFSV4OP_CBSEQUENCE: u32 = 11;
pub const NFSV4OP_CBWANTCANCELLED: u32 = 12;
pub const NFSV4OP_CBNOTIFYLOCK: u32 = 13;
pub const NFSV4OP_CBNOTIFYDEVID: u32 = 14;
pub const NFSV41_CBNOPS: u32 = 15;
pub const NFSV42_CBNOPS: u32 = 16;
pub const NFS_V3NPROCS: u32 = 22;
pub const NFSPROC_LOOKUPP: u32 = 22;
pub const NFSPROC_SETCLIENTID: u32 = 23;
pub const NFSPROC_SETCLIENTIDCFRM: u32 = 24;
pub const NFSPROC_LOCK: u32 = 25;
pub const NFSPROC_LOCKU: u32 = 26;
pub const NFSPROC_OPEN: u32 = 27;
pub const NFSPROC_CLOSE: u32 = 28;
pub const NFSPROC_OPENCONFIRM: u32 = 29;
pub const NFSPROC_LOCKT: u32 = 30;
pub const NFSPROC_OPENDOWNGRADE: u32 = 31;
pub const NFSPROC_RENEW: u32 = 32;
pub const NFSPROC_PUTROOTFH: u32 = 33;
pub const NFSPROC_RELEASELCKOWN: u32 = 34;
pub const NFSPROC_DELEGRETURN: u32 = 35;
pub const NFSPROC_RETDELEGREMOVE: u32 = 36;
pub const NFSPROC_RETDELEGRENAME1: u32 = 37;
pub const NFSPROC_RETDELEGRENAME2: u32 = 38;
pub const NFSPROC_GETACL: u32 = 39;
pub const NFSPROC_SETACL: u32 = 40;
pub const NFSV4_NPROCS: u32 = 41;
pub const NFSPROC_EXCHANGEID: u32 = 41;
pub const NFSPROC_CREATESESSION: u32 = 42;
pub const NFSPROC_DESTROYSESSION: u32 = 43;
pub const NFSPROC_DESTROYCLIENT: u32 = 44;
pub const NFSPROC_FREESTATEID: u32 = 45;
pub const NFSPROC_LAYOUTGET: u32 = 46;
pub const NFSPROC_GETDEVICEINFO: u32 = 47;
pub const NFSPROC_LAYOUTCOMMIT: u32 = 48;
pub const NFSPROC_LAYOUTRETURN: u32 = 49;
pub const NFSPROC_RECLAIMCOMPL: u32 = 50;
pub const NFSPROC_WRITEDS: u32 = 51;
pub const NFSPROC_READDS: u32 = 52;
pub const NFSPROC_COMMITDS: u32 = 53;
pub const NFSPROC_OPENLAYGET: u32 = 54;
pub const NFSPROC_CREATELAYGET: u32 = 55;
pub const NFSV41_NPROCS: u32 = 56;
pub const NFSSTATS_V1: u32 = 1;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __time_t = __int64_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct bintime {
    pub sec: time_t,
    pub frac: u64,
}
#[test]
fn bindgen_test_layout_bintime() {
    assert_eq!(
        ::std::mem::size_of::<bintime>(),
        16usize,
        concat!("Size of: ", stringify!(bintime))
    );
    assert_eq!(
        ::std::mem::align_of::<bintime>(),
        8usize,
        concat!("Alignment of ", stringify!(bintime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bintime>())).sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bintime),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bintime>())).frac as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bintime),
            "::",
            stringify!(frac)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nfsstatsv1 {
    pub vers: ::std::os::raw::c_int,
    pub attrcache_hits: u64,
    pub attrcache_misses: u64,
    pub lookupcache_hits: u64,
    pub lookupcache_misses: u64,
    pub direofcache_hits: u64,
    pub direofcache_misses: u64,
    pub accesscache_hits: u64,
    pub accesscache_misses: u64,
    pub biocache_reads: u64,
    pub read_bios: u64,
    pub read_physios: u64,
    pub biocache_writes: u64,
    pub write_bios: u64,
    pub write_physios: u64,
    pub biocache_readlinks: u64,
    pub readlink_bios: u64,
    pub biocache_readdirs: u64,
    pub readdir_bios: u64,
    pub rpccnt: [u64; 69usize],
    pub rpcretries: u64,
    pub srvrpccnt: [u64; 81usize],
    pub srvrpc_errs: u64,
    pub srv_errs: u64,
    pub rpcrequests: u64,
    pub rpctimeouts: u64,
    pub rpcunexpected: u64,
    pub rpcinvalid: u64,
    pub srvcache_inproghits: u64,
    pub srvcache_idemdonehits: u64,
    pub srvcache_nonidemdonehits: u64,
    pub srvcache_misses: u64,
    pub srvcache_tcppeak: u64,
    pub srvcache_size: ::std::os::raw::c_int,
    pub srvclients: u64,
    pub srvopenowners: u64,
    pub srvopens: u64,
    pub srvlockowners: u64,
    pub srvlocks: u64,
    pub srvdelegates: u64,
    pub cbrpccnt: [u64; 16usize],
    pub clopenowners: u64,
    pub clopens: u64,
    pub cllockowners: u64,
    pub cllocks: u64,
    pub cldelegates: u64,
    pub cllocalopenowners: u64,
    pub cllocalopens: u64,
    pub cllocallockowners: u64,
    pub cllocallocks: u64,
    pub srvstartcnt: u64,
    pub srvdonecnt: u64,
    pub srvbytes: [u64; 81usize],
    pub srvops: [u64; 81usize],
    pub srvduration: [bintime; 81usize],
    pub busyfrom: bintime,
    pub busytime: bintime,
}
#[test]
fn bindgen_test_layout_nfsstatsv1() {
    assert_eq!(
        ::std::mem::size_of::<nfsstatsv1>(),
        4344usize,
        concat!("Size of: ", stringify!(nfsstatsv1))
    );
    assert_eq!(
        ::std::mem::align_of::<nfsstatsv1>(),
        8usize,
        concat!("Alignment of ", stringify!(nfsstatsv1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).vers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(vers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).attrcache_hits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(attrcache_hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).attrcache_misses as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(attrcache_misses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).lookupcache_hits as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(lookupcache_hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).lookupcache_misses as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(lookupcache_misses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).direofcache_hits as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(direofcache_hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).direofcache_misses as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(direofcache_misses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).accesscache_hits as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(accesscache_hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).accesscache_misses as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(accesscache_misses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).biocache_reads as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(biocache_reads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).read_bios as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(read_bios)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).read_physios as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(read_physios)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).biocache_writes as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(biocache_writes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).write_bios as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(write_bios)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).write_physios as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(write_physios)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).biocache_readlinks as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(biocache_readlinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).readlink_bios as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(readlink_bios)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).biocache_readdirs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(biocache_readdirs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).readdir_bios as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(readdir_bios)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).rpccnt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(rpccnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).rpcretries as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(rpcretries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvrpccnt as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvrpccnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvrpc_errs as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvrpc_errs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srv_errs as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srv_errs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).rpcrequests as *const _ as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(rpcrequests)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).rpctimeouts as *const _ as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(rpctimeouts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).rpcunexpected as *const _ as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(rpcunexpected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).rpcinvalid as *const _ as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(rpcinvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvcache_inproghits as *const _ as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvcache_inproghits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nfsstatsv1>())).srvcache_idemdonehits as *const _ as usize
        },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvcache_idemdonehits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nfsstatsv1>())).srvcache_nonidemdonehits as *const _ as usize
        },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvcache_nonidemdonehits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvcache_misses as *const _ as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvcache_misses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvcache_tcppeak as *const _ as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvcache_tcppeak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvcache_size as *const _ as usize },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvcache_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvclients as *const _ as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvclients)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvopenowners as *const _ as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvopenowners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvopens as *const _ as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvopens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvlockowners as *const _ as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvlockowners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvlocks as *const _ as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvlocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvdelegates as *const _ as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvdelegates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).cbrpccnt as *const _ as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(cbrpccnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).clopenowners as *const _ as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(clopenowners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).clopens as *const _ as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(clopens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).cllockowners as *const _ as usize },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(cllockowners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).cllocks as *const _ as usize },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(cllocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).cldelegates as *const _ as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(cldelegates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).cllocalopenowners as *const _ as usize },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(cllocalopenowners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).cllocalopens as *const _ as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(cllocalopens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).cllocallockowners as *const _ as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(cllocallockowners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).cllocallocks as *const _ as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(cllocallocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvstartcnt as *const _ as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvstartcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvdonecnt as *const _ as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvdonecnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvbytes as *const _ as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvops as *const _ as usize },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).srvduration as *const _ as usize },
        3016usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(srvduration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).busyfrom as *const _ as usize },
        4312usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(busyfrom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfsstatsv1>())).busytime as *const _ as usize },
        4328usize,
        concat!(
            "Offset of field: ",
            stringify!(nfsstatsv1),
            "::",
            stringify!(busytime)
        )
    );
}
impl Default for nfsstatsv1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
